<?php namespace MyAssistant\BudgetBundle\Entity;


use Carbon\Carbon;
use Doctrine\ORM\EntityRepository;
use MyAssistant\AuthJwtBundle\Entity\User;

/**
 * PurchaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PurchaseRepository extends EntityRepository
{
    /**
     * Find all purchases for specific user and specific day.
     *
     * @param array $days
     *
     * @return array
     */
    public function findAllForDays(array $days)
    {
        $query = $this->createQueryBuilder('t')
                      ->select('t')
                      ->where('t.boughtAt IN (:boughtAt)')
                      ->setParameter('boughtAt', $days)
                      ->orderBy('t.boughtAt', 'desc')
                      ->getQuery();

        return $query->getResult();
    }

    /**
     * Return total count
     *
     * @return int
     */
    public function getCount()
    {
        return (int)$this
            ->createQueryBuilder('f')
            ->select('COUNT(f)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param null $month
     * @param null $year
     *
     * @return int
     */
    public function getSum($year = null, $month = null)
    {
        $builder = $this->createQueryBuilder('t')
                        ->select('SUM(t.price)')
                        ->innerJoin('t.user', 'Purchase');

        if ($month && $year) {
            $date = Carbon::create($year, $month, 1, 0, 0, 0);
            $builder->where('t.boughtAt >= :startDate AND t.boughtAt < :endDate');
            $builder->setParameter(':startDate', $date->format('Y-m-d'));
            $builder->setParameter(':endDate', $date->addMonth()->format('Y-m-d'));
        }

        $result = $builder
            ->getQuery()
            ->getSingleScalarResult();

        if (!$result) {
            $result = 0;
        }

        return $result;
    }

}
