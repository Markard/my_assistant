<?php namespace MyAssistant\AuthJwtBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
    /**
     * {@inheritdoc}
     */
    public function loadUserByUsername($username)
    {
        $user = $this->createQueryBuilder('u')
                     ->where('u.username = :username OR u.email = :email')
                     ->setParameter('username', $username)
                     ->setParameter('email', $username)
                     ->getQuery()
                     ->getOneOrNullResult();

        if (!$user) {
            $message = sprintf('Unable to find user identified by "%s".', $username);
            throw new UsernameNotFoundException($message);
        }

        return $user;
    }

    /**
     * {@inheritdoc}
     */
    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
        }

        return $this->loadUserByUsername($user->getUsername());
    }

    /**
     * {@inheritdoc}
     */
    public function supportsClass($class)
    {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }

    /**
     * Set purchasesPerDay for all users.
     */
    public function resetPurchaseCounters()
    {
        $this->createQueryBuilder('u')
            ->update()
            ->set('u.purchasesPerDay', 0)
            ->getQuery()
            ->execute();
    }

    /**
     * Set incomesPerMonth for all users.
     */
    public function resetIncomeCounters()
    {
        $this->createQueryBuilder('u')
             ->update()
             ->set('u.incomesPerMonth', 0)
             ->getQuery()
             ->execute();
    }
}
